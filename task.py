# 22. Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, 
# которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. m - кол-во элементов второго множества. 
# Затем пользователь вводит сами элементы множеств.

# count_set_n = int(input("Введите кол-во элементов первого множества: "))
# count_set_m = int(input("Введите кол-во элементов второго множества: "))
# set_n = set()
# set_m = set()
# for _ in range(count_set_n): 
#     set_n.add (int(input("Введите элементы первого множества: "))) 
# for _ in range(count_set_m): 
#     set_m.add (int(input("Введите элементы второго множества: ")))
# print(set_n, set_m)

# print (sorted(set_n & set_m))

# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растет на круглой грядке, причем кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растет N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких 
# собирающих модулей. Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и 
# с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, находясь перед некоторым 
# кустом заданной во входном файле грядки.

# import random
# count_n = int(input("Введите количество кустов на грядке: "))
# berries_count = [random.randint(1, 10) for i in range(count_n)]
# print(berries_count)
# max_count = 0

# # garden = [berries_count[0], berries_count[1]] 
# # berries_count.extend(garden)

# berries_count = berries_count + berries_count[:2]

# print(berries_count)
# for elem in range(count_n):
#     if berries_count[elem] + berries_count[elem+1] + berries_count[elem + 2] > max_count:
#        max_count = berries_count[elem] + berries_count[elem+1] + berries_count[elem + 2]
# print(max_count) 
